<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Ich bin yiwen.</title>
        <link>http://wysiwyz.github.io/</link>
        <description>An ordinary space for storing and groups pieces of articles.</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 04 Jan 2024 14:12:33 &#43;0800</lastBuildDate>
            <atom:link href="http://wysiwyz.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>[筆記] 黑白箱弱點掃描淺淺談</title>
    <link>http://wysiwyz.github.io/posts/ss_white-box/</link>
    <pubDate>Thu, 04 Jan 2024 14:12:33 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/ss_white-box/</guid>
    <description><![CDATA[黑白箱弱點掃描 白箱： 又名為輔助邏輯驅動測試 (auxiliary and logic driven testing)、clear-box testing、open-box testing 在光譜上是黑箱測試的另一面，滲透測試者對source code以及相關架構設計文件有全部的存取權限 在大量可用的data中淘選過濾，目地在於找到潛在弱點，因此它是滲透測試中最耗時的一種 白箱滲透測試人員可以對static code進行分析 白箱測試可以手動執行，或借助於自動化工具掃出像是 SQL注入攻擊(SQL injection)、跨站腳本攻擊 (cross-site scripting)、緩衝區溢位 (buffer overflow) 等弱點。 以下是白箱測試中很重要的工具：source code analyzer, debuggers 另外 dynamic analysis tool 也很重要，可以找出static analysis可能會漏掉的弱點，像是目標系統錯誤配置造成的弱點 (misconfiguration of target systems) 白箱滲透測試提供了綜合的評估，包含程式的內部弱點與外部弱點 黑箱： 又稱為 DAST test (動態分析資安測試 dynamic analysis security testing) 黑箱測試對於找出這樣的弱點很有幫助：input/output驗證問題, 伺服器配置相關的錯誤等。 黑箱測試的目標是要模擬真實世界的情境，並找出系統在不同情境下的行爲，例如網路攻擊、惡意輸入、阻斷服務攻擊DoS。 黑箱測試可以手動操作執行，或透過像是port scanners、fuzzers、web scanners 等自動化工具探測系統弱點。 深透測試目的是為了識別並補強可能會被攻擊者利用的弱點，因此黑箱測試是比較理想的滲透測試方法，因為大多數攻擊者並不知道目標網路的內部行為。
跟黑箱測試相反的則是白箱測試，測試人員有目標系統的完整資訊。
而灰箱測試則是提供測試人員有關目標系統『有限的』資訊，灰箱測試所模擬的資訊瞭解程度是「駭客透過調查與系統偵查足跡(footprinting)的方式，長期使用目標系統所能得到資訊」。
參考資料 黑箱、灰箱、白箱滲透測試是什麼
以黑箱測試改進應用程式的安全性
白箱資安測試與黑箱測試的異同]]></description>
</item>
<item>
    <title>初學 Kafka</title>
    <link>http://wysiwyz.github.io/posts/s_kafka/</link>
    <pubDate>Wed, 03 Jan 2024 15:52:54 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/s_kafka/</guid>
    <description><![CDATA[Kafka Broker Kafka broker (9092) is the first server that users interact with, it listens to some TCP connection. There are two pieces of abstractions &mdash; producer and consumer. 消費者與生產者的抽象概念
Topic: 資料邏輯分層 logical partitioning of data
Kafka broker(9092) [Topic A] Producer &lt;---&gt; [Topic B] &lt;---&gt; Consumer 假設現在 Kafka broker 裡面有個 Users Topic，而生產者發佈 John 進去 Users topic，當生產者持續發佈東西進 Users Topic，這個 Topic 就會越來越肥大
消費者在從 Users Topic 拉訊息 (pull information) 下來，
當資料表記有百萬筆資料，會採用sharding 將資料分成不同 database，而Kafka借用了這種技術，將Users Topic 分成了 Partition 1 (A - M) 與 Partition 2 (N-Z)。]]></description>
</item>
<item>
    <title>Docker</title>
    <link>http://wysiwyz.github.io/posts/s_docker_learn/</link>
    <pubDate>Tue, 26 Dec 2023 14:59:55 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/s_docker_learn/</guid>
    <description><![CDATA[Docker Note docker ps
​ list running containers
docker stop &lt;container_id&gt;
​ stops the container
docker start &lt;container_id&gt;
​ starts stopped container
docker ps -a
​ lists running and stopped container
docker run &lt;image_name&gt;:
​ pulls image and starts container
​ (docker pull + docker start in one command)
[CONTAINER Port vs HOST Port]
+ Multiple containers can run on your host machine
+ Your laptop has only certain ports available]]></description>
</item>
<item>
    <title>使用 JUnit &amp; Mockito 測試 Java 程式</title>
    <link>http://wysiwyz.github.io/posts/s_junit/</link>
    <pubDate>Tue, 26 Dec 2023 14:14:47 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/s_junit/</guid>
    <description><![CDATA[使用 JUnit &amp; Mockito 測試 Java 程式 Mockito &mdash; 本來以為這跟薄荷飲料mochito同音，實際要唸成 /mɑkiːtoʊ/ 或者 /mˈɒkiːtoʊ/ ，音譯就是『莫kito』或者『碼kito』，總之 k 要發音，因為他是模擬方法 (&ldquo;mock all methods&rdquo;)
Unit Testing簡介 Unit Test 是什麼 單元測試是用來測試你的程式碼一部分區塊 的一個小型方法
1 2 3 public String isEmailValid(String email) { //Code that needs to be tested } 如何寫單元測試以確保一個類別中的某方法正常運作呢？
這是一段除法程式：
1 2 3 4 5 public class Calculator { public int integerDivision(int dividend, int divisor) { return dividend / divisor; } } 我們可以寫以下的單元測試，以驗證上方程式裡，開發者沒有敲錯鍵，把除號打成乘號.
1 2 3 4 5 6 7 8 9 @Test void testIntegerDivision_whenValidValuesProvided_shouldReturnExpectedResult() { //Arrange Calculator calculatore = new Calculator(); //Act int result = calculator.]]></description>
</item>
<item>
    <title>Gradle初探</title>
    <link>http://wysiwyz.github.io/posts/ss_gradle/</link>
    <pubDate>Tue, 26 Dec 2023 14:14:31 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/ss_gradle/</guid>
    <description><![CDATA[概觀 Gradle是一個基於Groovy的建構管理系統，它特別設計用來建構基於Java的專案
Gradle運行在所有主流作業系統，只需要Java JDK 8 或者以上的版本即可安裝
(1) Unix的作業系統，可以用 SDKMAN package manager 安裝，指令sdk install gradle 8.5
​ macOS的作業系統，可以用Homebrew package manager安裝，指令 brew install gradle
(2) 設置環境
Linux or MacOS: 在所選的目錄下解壓縮
$ mkdir /opt/gradle $ unzip -d /opt/gradle gradle-8.5-bin.zip $ ls /opt/gradle/gradle-8.5 LICENSE NOTICE bin getting-started.html init.d lib media Microsoft Windows
用 File Explorer 創建新的目錄 C:\Gradle，再把下載後解壓縮的 gradle-8.5 資料夾拉進去這個目錄
(3) 配置環境變數
Linux or MacOS: 配置 PATH 環境變數，注意要包括解壓縮後擋彈的 bin 目錄
$ export PATH=$PATH:/opt/gradle/gradle-8.6/bin Microsoft Windows: [This PC/Computer] 右鍵 → Properties → Advanced System Settings → Environment Variable 在System Variables，選擇Path→ Edit，加上 C:\Gradle\gradle-8.]]></description>
</item>
<item>
    <title>Spring JPA 與 Hibernete</title>
    <link>http://wysiwyz.github.io/posts/ss_springdatajpa_vs_hibernete/</link>
    <pubDate>Tue, 26 Dec 2023 14:13:59 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/ss_springdatajpa_vs_hibernete/</guid>
    <description><![CDATA[ORM 物件關係的映射 Object-Relational Mapping的概念是可以將資料表內容做提取，並映射為物件的形式。
缺點：對於複雜的操作（e.g. 多表格的join或查詢），相較於直接下SQL語句，更為綁手綁腳
優點：不用操作繁瑣的SQL，也可以避免惡意注入攻擊
JPA (Java Persistence API) 持久化：資料「儲存」與「讀取」的過程，意即將資料從瞬時狀態改為持久狀態的過程（將資料存進資料庫的過程）
JPA：透過Java將資料儲存到資料庫的API
使用JPA優點：
可以隨時切換想要使用的 ORM 框架
可以使用JPQL (Java Persistence Query Language) 向資料庫下命令：
JPQL v.s. SQL:
SQL在不同資料庫，有不同SQL命令語句 JPQL操作對象不著重於資料庫，而是JPA的Entity Object下類似SQL的命令 （切換不同資料庫，不用特別修改SQL語句） 常見的 ORM 框架： Hibernate -
一般使用 Spring Data JPA 就會使用 Hibernate
Hibernate 可以自動生成SQL 語句，自動執行
優勢：
簡化開發_簡化了數據訪問層的開發流程 自動化查詢_只要方法命名好，就能生成相應的查詢語句 強大的ORM功能_便於物件和關係數據庫之間的轉換 數據庫管理_Spring Data JPA 透過Spring框架的數據源管理功能，可方便切換和配置不同數據源 劣勢：
性能問題_因為是以ORM的方式訪問數據，如果在大量數據或複雜查詢的應用情境下，可能會有性能上的影響 靈活性限制_在比較需要高級查詢的場景下有些侷限，需要編寫自定義JPQL 舉例：
1 2 3 public interface UserRepository extends JpaRepository&lt;User, Long&gt; { List&lt;User&gt; findByLastName(String lastName); } MyBatis -]]></description>
</item>
<item>
    <title>1hr37mins30secs de SpringBoot</title>
    <link>http://wysiwyz.github.io/posts/ss_springboot/</link>
    <pubDate>Tue, 26 Dec 2023 14:13:34 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/ss_springboot/</guid>
    <description><![CDATA[SpringBoot 2023 SpringBoot initializr Dependencies:
SpringBoot DevTools Spring Web Spring Data JPA and Hibernate PostgreSQL Driver Starting the server src - main - java - com.example.demo.DemoApplication - resources - static - templates - application.properties - test - java - resources Create a simple API 1 2 3 4 5 6 7 @RestController //To Make the class to serve restful endpoint public class DemoController {} @GetMapping //To set Restful endpoint on method public List&lt;String&gt; hello() { return List.]]></description>
</item>
<item>
    <title>Redis 筆記</title>
    <link>http://wysiwyz.github.io/posts/ss_redis_notes/</link>
    <pubDate>Tue, 26 Dec 2023 14:12:12 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/ss_redis_notes/</guid>
    <description><![CDATA[資料分群 三種依照服務類型儲存資料的方法：
namespace：在key的前面加上如user:的prefix，所有資料放在一個Redis內
建議用:區分。 可以用 redis-audit，它會用自動分群，也可以加入部分規則，減少自動分群花的時間。
使用 database：用指令 select 切換用不同的 &ldquo;database&rdquo;
Redis Cluster只能用database 0，因此長遠 scalability 考量，database並不適用。
用不同的 Redis servers
管理成本較高。設成LRU mode存cache資料，作為第一個Redis Cluster：存persistent data，作為第二個Redis Cluster。如此，可以個別設定適合的 shards、replicas 以及 各別設定適合的shards、replicas 以及 OOM 時的處理方式。
使用Expiration &ndash; 標上有效期限 避免無限量的丟東西到記憶體裡面，以降低太多資料的管理成本
須注意，Redis只有支援在第一層keys加上expiration。如果需要用到hash，可是hash部分內容需要加expiration的話，比較善用expiration的方法是「將一個大hash攤成多個小hash或者string，才能善用expiration。另外，使用多個小hash會比一個大hash更省時間，因為Redis有針對小hash的最佳化儲存方式。
分析占空間的keys 除了分析工具 (redis-audit等其他記憶體分析工具)，也可以用redis-cli查找問題
找出常見的keys，看數量分佈是否合理：redis-cli scan 0 count 100
取樣找出各個資料類型最大的keys：redis-cli --bigkeys
查看 KEY serialized 後的大小：DEBUG OBJECT key
看某個 KEY 多久沒有被存取：OBJECT IDLETIME key
[注意] default setting下，不會回傳正確的值
Latency 常用指令：
了解自己機器合理的 operation per second：benchmark
找出 ≥ 10ms的操作：slowlog
因為 Redis 單線程(只有main thread)，可以用這指令找出比較花時間的操作]]></description>
</item>
<item>
    <title>Think in REACT</title>
    <link>http://wysiwyz.github.io/posts/react_scrimba/</link>
    <pubDate>Wed, 25 Oct 2023 21:50:51 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/react_scrimba/</guid>
    <description><![CDATA[0. 建立 React 靜態頁面的入門方法 \index.html 在 head 加入 react 以及 react-dom 的 script 連結 referred doc
在 head 加入 babel.min.js 的 script 連結 referred doc
✏️ script 除了加上 index.js 的檔案來源，也要記得加上 type 屬性 text/babel，不然無法順利 ReactDOM.render() 喔！
1 2 3 4 5 6 7 8 9 10 11 12 &lt;html&gt; &lt;head&gt; &lt;link rel=&#34;stylesheet&#34; href=&#34;index.css&#34;&gt; &lt;script crossorigin src=&#34;https://unpkg.com/react@18/umd/react.development.js&#34;&gt;&lt;/script&gt; &lt;script crossorigin src=&#34;https://unpkg.com/react-dom@18/umd/react-dom.development.js&#34;&gt;&lt;/script&gt; &lt;script src=&#34;https://unpkg.com/babel-standalone@6/babel.min.js&#34;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&#34;root&#34;&gt;&lt;/div&gt; &lt;script src=&#34;index.js&#34; type=&#34;text/babel&#34;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; \index.js ReactDOM.]]></description>
</item>
<item>
    <title>跟著黑哥學 Kubernetes</title>
    <link>http://wysiwyz.github.io/posts/kubernetes_learn/</link>
    <pubDate>Mon, 09 Oct 2023 14:24:47 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/kubernetes_learn/</guid>
    <description><![CDATA[0-1 應用部署方式演變
0-2 kubernetes 介紹
本質是一組服務器集群，每個服務器都稱為一個節點，可以在每個節點中的容器安裝程序
0-3 kubernetes 組件 一個 k8s 集群分為控制節點master_node，工作節點worker_node構成，每個節點上都安裝不同的組件
Master: 集群的控制平面，負責集群的決策（管理） API Server：資源操作的唯一入口，接收用戶輸入的命令，提供認證、授權、API註冊和發現等機制 K8S 的整個訪問入口 Scheduler：負責集群資源調度，按照預訂的調度策略將Pod調度到相應的node節點上 根據算法決定安裝nginx的請球要分配給哪一個node節點（負責算） ControllerManager：負責維護集群的狀態，比如程序部署安排、故障檢測、自動擴展、滾動更新等 如何將 nginx 安裝請求交給 node1節點（負責安排幹活） Etcd：負責存儲集群中各種資源對象的信息 用來紀錄請求信息儲存在資料庫中（也可以改用mysql） Node: 集群的數據平面，負責為容器提供運行環境 [worker_node] Kubelet：負責維護容器的生命週期，即通過控制docker，來創建、更新、銷毀容器 接收控制節點發來的訊息，並傳送命令給 worker node 裡面其他的組件_docker
KubeProxy：負責提供集群內部的服務發現和負載均衡
訪問程序的入口
Docker：負責節點上容器的各種操作
以部署一個 nginx 服務來說明 kubernetes 系統各個組件調用關係 首先要明確，一旦 kubernetes 環境啟動之後，master 和 node 都會將自身的信息存儲到 etcd 數據庫中 一個 nginx 服務的安裝請求會首先被發送到 master 節點的 apiServer 組件 apiServer 組件會調用 scheduler 組件來決定到底應該把這個服務安裝到哪一個 node 節點上 此時，它會從 etcd 中讀取各個 node 節點的信息，然後按照一定的算法進行選擇，並將結果告知 apiServer apiServer 調用 controller_manager 去調度 Node 節點安裝 nginx 服務 Kubelet 接收到指定之後，會通知 docker，然後由 docker 來啟動一個 nginx 的 pod pod 是 kubernetes 的最小操作單元，容器必須跑在 pod 中至此 一個 nginx 服務就運行了，如果需要訪問 nginx，就需要通過 kube-proxy 來對 pod 產生訪問的代理 這樣，外界用戶就可以訪問集群中的 nginx 服務了 0-4 kubernetes 概念 Master：集群控制節點，每個集群需要至少一個 master 節點負責集群的管控 安排工作的]]></description>
</item>
</channel>
</rss>
