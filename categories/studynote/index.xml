<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>StudyNote - Category - Ich bin yiwen.</title>
        <link>http://wysiwyz.github.io/categories/studynote/</link>
        <description>StudyNote - Category - Ich bin yiwen.</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 10 Jan 2024 13:01:59 &#43;0800</lastBuildDate><atom:link href="http://wysiwyz.github.io/categories/studynote/" rel="self" type="application/rss+xml" /><item>
    <title>GCP on board</title>
    <link>http://wysiwyz.github.io/posts/gcp_on_board/</link>
    <pubDate>Wed, 10 Jan 2024 13:01:59 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/gcp_on_board/</guid>
    <description><![CDATA[Mod1_GCP 簡介 什麼是雲端運算？
自助式隨選服務 - 無需人為介入即可取得資源 廣泛的網路存取權 - 隨時隨地都可存取 資源集區 (共享資源的概念) - 提供者可將資源分享給客戶 迅速彈性 - 隨需快速取得更多資源 依使用的服務計費 - 用多少，付多少 雲端技術如何發展而成？未來方向為何？
實體/主機代管：由使用者設定、管理與維護 [Phase2] 虛擬化：由使用者設定，由供應商代管與維護 [Phase3] 無伺服器：全自動化 GCP 運算架構 [採用代管基礎架構] ↔️ [採用動態基礎架構]
Compute Engine Kubernetes Engine App Engine Cloud Functions 代管服務 IaaS 混合式 PaaS 無伺服器邏輯 自動 GCP 在全球設立187個網路邊緣位置（POP，網際網路交換中心），並投資鋪設20+條海底電纜
GCP 依區域和可用區劃分
區域region、可用區zone
每個區域裡有多個可用區zone (大部分3個)，一個資料中心就是一個區域region
Google善盡環保責任
100%落實碳中和政策(自2007年起)
Data Center 2030年達成零碳排
全球數一數二的再生能源採購企業
資料中心率先通過 ISO 14001 認證
貼近客戶需求的計價方式
以秒/毫秒計費：適用於運算、資料處理和其他服務 續用折扣：虛擬機器的使用時間超過當月的25%，就會自動套用此折扣 (upto 30%) 承諾使用折扣：以較低的價格取得長期穩定的工作負載 (around 50%off) 先占使用折扣：以較低價格取得可中斷的工作負載 自訂VM執行個體類型：僅為應用程式所需的資源付費 (pricing calculator) 開放式API和開放原始碼讓客戶能改用其他供應商的服務]]></description>
</item>
<item>
    <title>Spring Security zero to master</title>
    <link>http://wysiwyz.github.io/posts/s_spring_security/</link>
    <pubDate>Mon, 08 Jan 2024 13:33:24 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/s_spring_security/</guid>
    <description><![CDATA[想學很久的 Spring Security 終於在看完 udemy 的 JUnit + Mockito 課程之後，決定認真來瞭解一下了！！
先附上 連結]]></description>
</item>
<item>
    <title>[筆記] 黑白箱弱點掃描淺淺談</title>
    <link>http://wysiwyz.github.io/posts/ss_white-box/</link>
    <pubDate>Thu, 04 Jan 2024 14:12:33 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/ss_white-box/</guid>
    <description><![CDATA[黑白箱弱點掃描 白箱： 又名為輔助邏輯驅動測試 (auxiliary and logic driven testing)、clear-box testing、open-box testing 在光譜上是黑箱測試的另一面，滲透測試者對source code以及相關架構設計文件有全部的存取權限 在大量可用的data中淘選過濾，目地在於找到潛在弱點，因此它是滲透測試中最耗時的一種 白箱滲透測試人員可以對static code進行分析 白箱測試可以手動執行，或借助於自動化工具掃出像是 SQL注入攻擊(SQL injection)、跨站腳本攻擊 (cross-site scripting)、緩衝區溢位 (buffer overflow) 等弱點。 以下是白箱測試中很重要的工具：source code analyzer, debuggers 另外 dynamic analysis tool 也很重要，可以找出static analysis可能會漏掉的弱點，像是目標系統錯誤配置造成的弱點 (misconfiguration of target systems) 白箱滲透測試提供了綜合的評估，包含程式的內部弱點與外部弱點 黑箱： 又稱為 DAST test (動態分析資安測試 dynamic analysis security testing) 黑箱測試對於找出這樣的弱點很有幫助：input/output驗證問題, 伺服器配置相關的錯誤等。 黑箱測試的目標是要模擬真實世界的情境，並找出系統在不同情境下的行爲，例如網路攻擊、惡意輸入、阻斷服務攻擊DoS。 黑箱測試可以手動操作執行，或透過像是port scanners、fuzzers、web scanners 等自動化工具探測系統弱點。 深透測試目的是為了識別並補強可能會被攻擊者利用的弱點，因此黑箱測試是比較理想的滲透測試方法，因為大多數攻擊者並不知道目標網路的內部行為。
跟黑箱測試相反的則是白箱測試，測試人員有目標系統的完整資訊。
而灰箱測試則是提供測試人員有關目標系統『有限的』資訊，灰箱測試所模擬的資訊瞭解程度是「駭客透過調查與系統偵查足跡(footprinting)的方式，長期使用目標系統所能得到資訊」。
參考資料 黑箱、灰箱、白箱滲透測試是什麼
以黑箱測試改進應用程式的安全性
白箱資安測試與黑箱測試的異同]]></description>
</item>
<item>
    <title>初學 Kafka</title>
    <link>http://wysiwyz.github.io/posts/ss_kafka/</link>
    <pubDate>Wed, 03 Jan 2024 15:52:54 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/ss_kafka/</guid>
    <description><![CDATA[Kafka Broker Kafka broker (9092) is the first server that users interact with, it listens to some TCP connection. There are two pieces of abstractions &mdash; producer and consumer. 消費者與生產者的抽象概念
Topic: 資料邏輯分層 logical partitioning of data
Kafka broker(9092) [Topic A] Producer &lt;---&gt; [Topic B] &lt;---&gt; Consumer 假設現在 Kafka broker 裡面有個 Users Topic，而生產者發佈 John 進去 Users topic，當生產者持續發佈東西進 Users Topic，這個 Topic 就會越來越肥大
消費者在從 Users Topic 拉訊息 (pull information) 下來，
當資料表記有百萬筆資料，會採用sharding 將資料分成不同 database，而Kafka借用了這種技術，將Users Topic 分成了 Partition 1 (A - M) 與 Partition 2 (N-Z)。]]></description>
</item>
<item>
    <title>Docker</title>
    <link>http://wysiwyz.github.io/posts/s_docker_learn/</link>
    <pubDate>Tue, 26 Dec 2023 14:59:55 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/s_docker_learn/</guid>
    <description><![CDATA[Docker Note docker ps
​ list running containers
docker stop &lt;container_id&gt;
​ stops the container
docker start &lt;container_id&gt;
​ starts stopped container
docker ps -a
​ lists running and stopped container
docker run &lt;image_name&gt;:
​ pulls image and starts container
​ (docker pull + docker start in one command)
[CONTAINER Port vs HOST Port]
+ Multiple containers can run on your host machine
+ Your laptop has only certain ports available]]></description>
</item>
<item>
    <title>使用 JUnit &amp; Mockito 測試 Java 程式</title>
    <link>http://wysiwyz.github.io/posts/ss_junit/</link>
    <pubDate>Tue, 26 Dec 2023 14:14:47 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/ss_junit/</guid>
    <description><![CDATA[使用 JUnit &amp; Mockito 測試 Java 程式 Mockito &mdash; 本來以為這跟薄荷飲料mochito同音，實際要唸成 /mɑkiːtoʊ/ 或者 /mˈɒkiːtoʊ/ ，音譯就是『莫kito』或者『碼kito』，總之 k 要發音，因為他是模擬方法 (&ldquo;mock all methods&rdquo;)
Unit Testing簡介 Unit Test 是什麼 單元測試是用來測試你的程式碼一部分區塊 的一個小型方法
1 2 3 public String isEmailValid(String email) { //Code that needs to be tested } 如何寫單元測試以確保一個類別中的某方法正常運作呢？
這是一段除法程式：
1 2 3 4 5 public class Calculator { public int integerDivision(int dividend, int divisor) { return dividend / divisor; } } 我們可以寫以下的單元測試，以驗證上方程式裡，開發者沒有敲錯鍵，把除號打成乘號.
1 2 3 4 5 6 7 8 9 @Test void testIntegerDivision_whenValidValuesProvided_shouldReturnExpectedResult() { //Arrange Calculator calculatore = new Calculator(); //Act int result = calculator.]]></description>
</item>
<item>
    <title>Gradle初探</title>
    <link>http://wysiwyz.github.io/posts/ss_gradle/</link>
    <pubDate>Tue, 26 Dec 2023 14:14:31 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/ss_gradle/</guid>
    <description><![CDATA[概觀 Gradle是一個基於Groovy的建構管理系統，它特別設計用來建構基於Java的專案
Gradle運行在所有主流作業系統，只需要Java JDK 8 或者以上的版本即可安裝
(1) Unix的作業系統，可以用 SDKMAN package manager 安裝，指令sdk install gradle 8.5
​ macOS的作業系統，可以用Homebrew package manager安裝，指令 brew install gradle
(2) 設置環境
Linux or MacOS: 在所選的目錄下解壓縮
$ mkdir /opt/gradle $ unzip -d /opt/gradle gradle-8.5-bin.zip $ ls /opt/gradle/gradle-8.5 LICENSE NOTICE bin getting-started.html init.d lib media Microsoft Windows
用 File Explorer 創建新的目錄 C:\Gradle，再把下載後解壓縮的 gradle-8.5 資料夾拉進去這個目錄
(3) 配置環境變數
Linux or MacOS: 配置 PATH 環境變數，注意要包括解壓縮後擋彈的 bin 目錄
$ export PATH=$PATH:/opt/gradle/gradle-8.6/bin Microsoft Windows: [This PC/Computer] 右鍵 → Properties → Advanced System Settings → Environment Variable 在System Variables，選擇Path→ Edit，加上 C:\Gradle\gradle-8.]]></description>
</item>
<item>
    <title>Spring JPA 與 Hibernete</title>
    <link>http://wysiwyz.github.io/posts/ss_springdatajpa_vs_hibernete/</link>
    <pubDate>Tue, 26 Dec 2023 14:13:59 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/ss_springdatajpa_vs_hibernete/</guid>
    <description><![CDATA[ORM 物件關係的映射 Object-Relational Mapping的概念是可以將資料表內容做提取，並映射為物件的形式。
缺點：對於複雜的操作（e.g. 多表格的join或查詢），相較於直接下SQL語句，更為綁手綁腳
優點：不用操作繁瑣的SQL，也可以避免惡意注入攻擊
JPA (Java Persistence API) 持久化：資料「儲存」與「讀取」的過程，意即將資料從瞬時狀態改為持久狀態的過程（將資料存進資料庫的過程）
JPA：透過Java將資料儲存到資料庫的API
使用JPA優點：
可以隨時切換想要使用的 ORM 框架
可以使用JPQL (Java Persistence Query Language) 向資料庫下命令：
JPQL v.s. SQL:
SQL在不同資料庫，有不同SQL命令語句 JPQL操作對象不著重於資料庫，而是JPA的Entity Object下類似SQL的命令 （切換不同資料庫，不用特別修改SQL語句） 常見的 ORM 框架： Hibernate -
一般使用 Spring Data JPA 就會使用 Hibernate
Hibernate 可以自動生成SQL 語句，自動執行
優勢：
簡化開發_簡化了數據訪問層的開發流程 自動化查詢_只要方法命名好，就能生成相應的查詢語句 強大的ORM功能_便於物件和關係數據庫之間的轉換 數據庫管理_Spring Data JPA 透過Spring框架的數據源管理功能，可方便切換和配置不同數據源 劣勢：
性能問題_因為是以ORM的方式訪問數據，如果在大量數據或複雜查詢的應用情境下，可能會有性能上的影響 靈活性限制_在比較需要高級查詢的場景下有些侷限，需要編寫自定義JPQL 舉例：
1 2 3 public interface UserRepository extends JpaRepository&lt;User, Long&gt; { List&lt;User&gt; findByLastName(String lastName); } MyBatis -]]></description>
</item>
<item>
    <title>1hr37mins30secs de SpringBoot</title>
    <link>http://wysiwyz.github.io/posts/ss_springboot/</link>
    <pubDate>Tue, 26 Dec 2023 14:13:34 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/ss_springboot/</guid>
    <description><![CDATA[SpringBoot 2023 SpringBoot initializr Dependencies:
SpringBoot DevTools Spring Web Spring Data JPA and Hibernate PostgreSQL Driver Starting the server src - main - java - com.example.demo.DemoApplication - resources - static - templates - application.properties - test - java - resources Create a simple API 1 2 3 4 5 6 7 @RestController //To Make the class to serve restful endpoint public class DemoController {} @GetMapping //To set Restful endpoint on method public List&lt;String&gt; hello() { return List.]]></description>
</item>
<item>
    <title>Redis 筆記</title>
    <link>http://wysiwyz.github.io/posts/ss_redis_notes/</link>
    <pubDate>Tue, 26 Dec 2023 14:12:12 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/ss_redis_notes/</guid>
    <description><![CDATA[資料分群 三種依照服務類型儲存資料的方法：
namespace：在key的前面加上如user:的prefix，所有資料放在一個Redis內
建議用:區分。 可以用 redis-audit，它會用自動分群，也可以加入部分規則，減少自動分群花的時間。
使用 database：用指令 select 切換用不同的 &ldquo;database&rdquo;
Redis Cluster只能用database 0，因此長遠 scalability 考量，database並不適用。
用不同的 Redis servers
管理成本較高。設成LRU mode存cache資料，作為第一個Redis Cluster：存persistent data，作為第二個Redis Cluster。如此，可以個別設定適合的 shards、replicas 以及 各別設定適合的shards、replicas 以及 OOM 時的處理方式。
使用Expiration &ndash; 標上有效期限 避免無限量的丟東西到記憶體裡面，以降低太多資料的管理成本
須注意，Redis只有支援在第一層keys加上expiration。如果需要用到hash，可是hash部分內容需要加expiration的話，比較善用expiration的方法是「將一個大hash攤成多個小hash或者string，才能善用expiration。另外，使用多個小hash會比一個大hash更省時間，因為Redis有針對小hash的最佳化儲存方式。
分析占空間的keys 除了分析工具 (redis-audit等其他記憶體分析工具)，也可以用redis-cli查找問題
找出常見的keys，看數量分佈是否合理：redis-cli scan 0 count 100
取樣找出各個資料類型最大的keys：redis-cli --bigkeys
查看 KEY serialized 後的大小：DEBUG OBJECT key
看某個 KEY 多久沒有被存取：OBJECT IDLETIME key
[注意] default setting下，不會回傳正確的值
Latency 常用指令：
了解自己機器合理的 operation per second：benchmark
找出 ≥ 10ms的操作：slowlog
因為 Redis 單線程(只有main thread)，可以用這指令找出比較花時間的操作]]></description>
</item>
</channel>
</rss>
