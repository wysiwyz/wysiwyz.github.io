<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>StudyNote - Category - Ich bin yiwen.</title>
        <link>http://wysiwyz.github.io/categories/studynote/</link>
        <description>StudyNote - Category - Ich bin yiwen.</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 03 Dec 2024 11:11:57 &#43;0800</lastBuildDate><atom:link href="http://wysiwyz.github.io/categories/studynote/" rel="self" type="application/rss+xml" /><item>
    <title>Apache Kafka 做中學</title>
    <link>http://wysiwyz.github.io/posts/kk_learn_by_doing_apache_kafka/</link>
    <pubDate>Tue, 03 Dec 2024 11:11:57 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://wysiwyz.github.io/posts/kk_learn_by_doing_apache_kafka/</guid>
    <description><![CDATA[這篇是根據 KK Learn By Doing: Beginner&rsquo;s Guide to Apache Kafka - Foundation and Development 所做的筆記與實作紀錄。
學習目標是要能夠將 Kafka architecture 以及 essential components 套用在服務紀錄需求面，只是這 2.5 小時的課可能還是遠遠不夠，都有人把 Kafka 寫成 30 篇系列文章了。
A distributed event streaming platform, widely used for building real-time data pipelines and applications
01 introduction to Kafka Kafka 是開源分布式事件串流平台 (open-sourced, distributed, event streaming platform)，由 Apache Software Foundation 開發，原本是 LinkedIn 建立，在 2011 年開源。
Kafka 是設計來處理實時資料，協助組織建構穩定、可擴充、且容錯率高的資料管線。
Core components Producer : 將 record 送往 Kafka topics 的 app，負責選擇要將 record 送到該 topic 中的哪一個 partition Consumer : 從 Kafka topics 讀取 record 的 app，consumer 訂閱 topics 並將訊息作即時處理 Broker : 運行 Kafka 的伺服器，broker 從 producer 接收訊息，存在 disk，再將其發送到 consumers。一個 Kafka cluster 包含多個 brokers，用來確保負載平衡與容錯率 Topic : 是一個 logical channel，使 producer 用以發送 record，consumer 用以讀取 record。為了平行化與可擴張性，topic 會分片 (partitioned) Partition: 每個 topic 都拆分成 partitions，這個 partition 是有序且不可變的紀錄序列 (sequence of records)，使 Kafka 能夠水平擴展並在每個 partition 裡面維持紀錄順序 ZooKeeper or Kraft: 用來做分布式協調、配置管理、Kafka broker 與 topics 的主節點選舉 Kafka architecture Topics &amp; Partitions: Topic 再切分成 partitions，partition 是平行化跟可擴張性的基礎單位。每一個 partition 都是有序不可變的紀錄序列。partition 當中的每一個 record 都會分配到一個唯一的偏移量 (unique offset)。partitions 使得 Kafka 藉由分布式資料以及負載於多個 brokers 這兩種方式，達到可擴展性。 Producers &amp; Consumers: Kafka 支援 pub-sub 模型，多個 conusmer 可以訂閱到相同一個 topic，並獨立處理 data。 Brokers &amp; Clusters: Kafka broker 負責儲存與提供資料。Kafka cluster 包含多個 brokers 用來確保容錯性與高可用性。Brokers 分布在不同個 machines 以避免硬體故障造成資料遺失。 Zooker Coordination : Zookeeper 或 KRaft 管理配置檔以及 Kafka broker 之間合作，協助進行 partitions 主節點選舉，追蹤 broker metadata。但 Kafka 從 verion 2.]]></description>
</item>
<item>
    <title>01 Kubestronaut KCNA &amp; KCSA</title>
    <link>http://wysiwyz.github.io/posts/cncf-kubestronaut-01kcna/</link>
    <pubDate>Fri, 29 Nov 2024 11:04:30 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://wysiwyz.github.io/posts/cncf-kubestronaut-01kcna/</guid>
    <description><![CDATA[KCNA Container and Orchestration
The matrix from hell
Web server, database, messaging, orchestration OS, hardware infrastructure libraries, dependencies Module 2 Quiz (failed ones only) How can you specify a specific runtime endpoint when using the CRI control tool?
Setting the CONTAINER_RUNTIME_ENDPOINT environment variable,
Using the --runtime-endpoint command line option
Why do Docker images continue to work seamlessly in Kubernetes even after the removal of Docker support?
Because Docker images adhere to the Open Container Initiative (OCI) standard]]></description>
</item>
<item>
    <title>Kong Academy 網關學習筆記</title>
    <link>http://wysiwyz.github.io/posts/kong-hq-academy/</link>
    <pubDate>Tue, 12 Nov 2024 12:33:42 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://wysiwyz.github.io/posts/kong-hq-academy/</guid>
    <description><![CDATA[由於最近工作上要從自建的網關轉移到 Kong 這個雲原生產品做 API Gateway，怕自己學不成，反而被派去從零開始學寫系統分析，又看到 Kong Gateway Certified Associate Exam 有相關的三個 Lab 可以跟著實作，所以決定寫一篇學習筆記，並且嘗試將自己理解的 Kong 寫下來當作 output 介紹給潛在讀者。
註：有人唸成『控』、但是 Youtube 的 Kong 官方頻道是唸作『抗』，就是香港 / 香江的『Kong』
References Education Konghq.com 裡面主要使用以下幾個 courses，註冊帳號後即可 enroll ，但一旦 enroll 了就有三天 due date 期限 KGLL-101 Getting Started with Kong Gateway - Services, Routes, Plugins &amp; Consumers KGLL-103 Logging and Analyzing Operational Metrics with Kong KGLL-106 Reduce the Risk of New Software Versions with Canary Deployments Kong Inc Youtube 官方影片 Kong Gateway Documentation Core entities Services]]></description>
</item>
<item>
    <title>當不成 Astronaut, 試試 Kubestronaut</title>
    <link>http://wysiwyz.github.io/posts/cncf-kubestronaut/</link>
    <pubDate>Mon, 16 Sep 2024 14:16:29 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://wysiwyz.github.io/posts/cncf-kubestronaut/</guid>
    <description><![CDATA[阿炆今年轉職前跟主管聊聊，說想學習 K8S 跟 AWS 微服務架構，所以離開了需要一直不停面試的乙方公司。
阿炆入職後學習使用了很多 CNCF 專案，像是 Kubernetes、ArgoCD、Keycloak、Prometheus、HELM、Longhorn，另外也考了一個 AWS 證照。
阿炆準備 AWS SAA-C03 之前一直陸陸續續的看函授自學線性代數跟離散數學，考完 AWS 之後覺得剩五個月時間不太夠了，加上一直以為自己試用期還沒結束，只是延長了，於是找新主管 one-on-one meeting 談談工作表現與規劃。
於是隔天下班前臨時多了個團咪，前一小時確實是在談專案進度，後一個半小時在閒聊，看起來寄出離職信太不給面子了。週末 K 完線性代數第四章的阿炆，回到沒放三明治假的公司，在最簡短的 stand-up meeting 開完後，跑到 Cloud Native User Group 搜尋 CKA 關鍵字，希望也有好心人分享考試心得。
說到 K8S，阿炆幾年前剛畢業有聽過這個名詞，那時候還很天兵的一為它跟 evernote 是同一路的 (明明用途完全不一樣，撰寫的語言還一個 Go 另一個 C++)。後來轉職培訓班畢業後的第一個 mentor，因為有 CKA 證照被認為是部門內的大將。後來某頂大丁組說明會也有一個組別就特別是 K8S 系統組。
阿炆一直認為自己非理組大學出身，沒有碩班，沒本科畢業是面試征戰的阿基里斯硬傷，聽完招生說明會覺得這 K8S 肯定是不弄懂不痛快了，於是立刻打開 bilibili 從黑馬程序員教你 Kubernetes 開始看。
接著過完年聽到同事面試台達電駐點也要求懂容器化技術，開始改看 TechWorld NaNa 的 Kubernetes 課程，一小時跟三個多小時的 youtube 影片都看過了，甚至三月份的知識分享小聚也講了 30 分鐘，面試收到 offer 之後也買了 kodekloud 的 CKA 課程以精進實力。
但是江湖中關於 kubernetes 學習曲線的風評如下：]]></description>
</item>
<item>
    <title>SAA-C03 AWS Solution Architect Associate 準備心得（下）</title>
    <link>http://wysiwyz.github.io/posts/saa-c03-two/</link>
    <pubDate>Fri, 06 Sep 2024 10:05:31 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://wysiwyz.github.io/posts/saa-c03-two/</guid>
    <description><![CDATA[本文有重新排版放到 medium &hellip; Go to Medium story
準備心得 八月中旬自主模擬小考的期間，看完 ExamTopics 前 240 題之後，我發現 AWS Educate 暑期陪跑計畫的 Discord 群組有好心人分享使用關鍵字可以 Google Search 搜尋到剩下 241 ~ 981 題絕大多數的題目，所以我的做法是把這些一個個 copy 下來。聽起來很蠢，但因為它有些頁面都需要用 reCAPTCHA 之類的驗證碼確認是不是真人才能開啟，就沒有考慮研究網路爬蟲來節省時間了。
另外也有使用 Google Apps Script 將存下來的題庫 google docs 轉成 google sheet，加上 Line Notify 並且紀錄每題發送次數的小功能，這樣用餐、吃飯時間、睡前、上洗手間、等火車這些零碎的滑手機時間，都會有 line 小幫手每 30 分鐘丟給你一個題目以及精選 discussion，實在是太有助於時間不夠的考生了！（絕對不是因為line通知太煩所以提前測驗的）
測驗過程 原本因為 voucher 通知信上說考照成功獎需要在9/27前考照成功，才有資格申請，所以排 9/20 週五晚上考試。但後來 9/2 全部將 ExamTopics 的題目收進複習的小本之後，覺得一直刷題實在很沒趣，有更重要的 Keycloak 升級與 Kubernetes 實務一把火在燒，所以隔天就手刀上 PearsonVue 測驗登記網站提前測驗日期了。
提前測驗的行為現在想來真是一步險棋，因為我到 9/5 晚上六點半測驗前都還沒有全部重看完所有考古 981 題。加上台北 PearsonVue 考場實在有夠冷，坐在一間長寬約 100 cm 的單人間座位，看著考試介面上字體被拉寬 10~20% 的英文題目，總時長 140 分鐘一共 65 題。]]></description>
</item>
<item>
    <title>SAA-C03 AWS Solution Architect Associate 準備心得（上）</title>
    <link>http://wysiwyz.github.io/posts/saa-c03-one/</link>
    <pubDate>Tue, 20 Aug 2024 11:41:20 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://wysiwyz.github.io/posts/saa-c03-one/</guid>
    <description><![CDATA[Motivation 自從去年八月考過 GCP PCA 之後，發現 (1) 想去的幾家公司使用的雲服務供應商都是用 AWS 居多，加上 (2) 某次聚會上遇到的進外商的優秀前同事有 AWS SAA-C03 證照，(3) 今年 AWS 新聞說要在台灣設立資料中心，以及 (4) 前公司提供了 AWS 考照半價補助但沒機會用到，還有 (5) 在 Facebook 社團看到 AWS 官方提供了兩種考照半價優惠的方案（一個要組隊報名，另一個只要在時限前完成官方部分課程）。
基於看到 Educate Program 再過一天就要報名截止的心態，我刻不容緩的完成兩章的指定課程，趕緊送出申請，並且在一週後的星期三收到報名成功通知信。
Requirement 報名成功通知信主要有三個重點：
要完成三個任務才能再填表單申請半價考試券 voucher
完成 skills builder 某一個課程（要提供課程完成100%截圖） 在 skills builder 某一個 exam set 考試達到 72 / 100 的成績 提供了一個 Notion URL 以及一個 Discord URL
可以在 notion 裡面看到其他人的考試心得、考古題資源還有 AWS 學習影片 9/27 之前考試通過的話可以拿到 AWS 背包或者 AWS T-Shirt；分享心得可以拿到筆電支架
許願 SAA 考過是拿到 T-shirt，但是 8/19 的考試券通知信是公告背包，也許可以拿來當地震逃難包的選手之一（？）]]></description>
</item>
<item>
    <title>Smart contract, wallet, solidity 新手村</title>
    <link>http://wysiwyz.github.io/posts/240522-solidity-smart-contract/</link>
    <pubDate>Wed, 22 May 2024 01:41:05 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/240522-solidity-smart-contract/</guid>
    <description><![CDATA[Preface 今天中午午休聽了itplus的每周線上會-Web3.0全端開發工程師，聽到不少以前完全沒機會認識的名詞，像是Dapp、電子錢包 Metamask、Mist Browser、智能合約 Smart Contract、Solidity，決定記錄下這個腦袋又增加的plugins。
References Metamask doc 這裡手把手教你用 React, typescript, vite 建置錢包，很是實用 The Ethereum Wiki Solidity_Introduction to Smart Contract 乙太坊社群專欄 ]]></description>
</item>
<item>
    <title>CKA 筆記 [7,8,9]: Security, Storage, Networking</title>
    <link>http://wysiwyz.github.io/posts/240520-k8s-security-storage-networking/</link>
    <pubDate>Mon, 20 May 2024 02:40:38 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/240520-k8s-security-storage-networking/</guid>
    <description><![CDATA[Section 7 Security TLS Basics 確保用戶跟Server之間的通訊是加密的
Symmetric Encryption: 加解密用同一支密鑰，必須在sender跟receiver之間交換，Hacker解密數據的風險較高。
Asymmetric Encryption:
Private Key: 用密鑰解密 Public Lock: 用公鎖加密 ssh-keygen id_rsa id_rsa.pub PKI - Public Key Infrastructure
Solution Certificates API [Lab] pwd ls cat akshay.csr cat akshay.csr | base64 # prints a single line cat akshay.csr | base64 -w 0 # create certificate signing request cat &gt; akshay.yaml vi akshay.csr vi akshay.yaml kubectl create -f akshay.yaml certificatesigningrequest.certificates.k8s.io/akshay created kubectl get csr kubectl certificate approve akshay kubectl get csr agent-smith -o yaml kubectl certificate deny agent-smith kubectl get csr kubectl delete csr agent-smith Create certificate signing request]]></description>
</item>
<item>
    <title>Docker Compose 厲害了！一次幫你蓋多個containers</title>
    <link>http://wysiwyz.github.io/posts/240515-docker-compose/</link>
    <pubDate>Wed, 15 May 2024 23:40:15 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/240515-docker-compose/</guid>
    <description><![CDATA[前陣子去圖書館借了一本圖解Docker&amp;Kubernetes的書，看到第七章專門討論Docker Compose，加上練習的專案也大量使用到這個技術，因此花點時間來看一下官方的Documentation。
Docker Compose 概覽 Docker Compose 這工具是用來定義以及運行多個容器之應用程式的工具，是解鎖流暢畫高效開發與部署經驗的工具。
Compose簡化了整個application stack的控制，使用一個YAML檔簡化了服務、網路、volume的管理。用單一的指令就能建立並啟動配置檔案裏面所有的服務。
Compose可以在production、staging、開發、測試、CI Workflow等各種環境使用，也有用來管理應用程式整個生命週期的指令：
Start, stop, rebuild 服務 檢視 running service 的狀態 對 running service 做日誌串流 對某個服務執行一個one-off指令 Docker Compose 主要優點 簡化控制性: 簡化了調度多個服務的複雜任務，管理或複製app環境更容易 有效合作: docker compose 配置檔容易共享，開發、運營之間協作更順利 快速應用程式開發: Compose會將創建容器的配置檔緩存起來，如果重啟了沒有做任何異動的服務，Compose會重複利用既有的容器，這樣要在environment做變更會很快 不同環境的可攜性: Compose 檔支援變數，可以用這些變數給不同環境或不同user客製化你的組成 廣泛的社群與支援: Docker Compost 有活躍的社群，提供豐富的資源、教學與支援 Docker Compose 常用 use cases 開發環境 Docker Compose 檔可以記錄並且配置應用程式全部的服務所需的依賴 (例如資料庫、隊列、緩存、Web service API等等)。可以用 docker compose up 一次建立並啟動每個依賴所需的容器。
Compose可以把一個多頁的「開發者新手指南」濃縮成一個單一且機器可讀的compose file外加幾個指令。
自動化測試環境 Automated test suite 是CICD程序中非常重要的一環。自動化end-to-end testing需要一個用來跑測試的環境。Compose提供一個很方便的方式，為你的test suite提供一個可以創建且用完銷毀的隔離測試環境。
docker compose up -d .]]></description>
</item>
<item>
    <title>消費者與提供者之間的合約測試 - Pact.io</title>
    <link>http://wysiwyz.github.io/posts/240510-pact.io/</link>
    <pubDate>Fri, 10 May 2024 17:39:51 &#43;0800</pubDate>
    <author>celine</author>
    <guid>http://wysiwyz.github.io/posts/240510-pact.io/</guid>
    <description><![CDATA[Introduction Pact是一個程式碼優先工具，使用contract tests測試 HTTP 以及訊息整合。Contract test斷言應用程式對應用程式之間的訊息，有符合文件所記錄的共識。如果沒有contract testing，那麼確保應用程式之前協作正確的唯一方式就只有使用容易壞掉又維護性高的整合測試了。
測試煙霧警報器的時候，會使用測試按鈕，不會直接燒了房子，同理可證，Pact提供程式碼這樣一個測試按鈕，讓你在部署好所有微服務之前，能夠先安全地確認程式碼正確執行。
Pact合約測試流程動圖
Consumer 針對provider mock執行單元測試，驗證自己程式的行為 跨系統之間的互動行為會捕捉至contract Contract由不同團隊之間共享，使用Pactflow工具能夠確保協同合作性 Contract中的requests 重演了 provider API 並驗證 consumer 的預期值 Provider 的測試中所有其他系統都用替身，所以能隔離測試 Javascript code guide, 5 mins
1 2 3 4 5 group = &#39;au.com.dius.pactworkshop&#39; dependencies { testImplementation &#39;au.com.dius.pact.consumer:junit5:4.6.5&#39; } contract testing是什麼 Contract testing 是用來測試某個integration point的技術，藉由隔離測試個別的APP，以確保它接收或傳送出的訊息，符合紀載在合約上的共識。
如果是透過HTTP通訊的應用程式，這些訊息就會是HTTP請求/回覆，如果是使用Queue的應用程式，這些訊息就會是要傳送到隊列的內容。
Pact實作合約測試的方式，就是確認所有呼叫你的test doubles的測試都會得到如同實際app一樣的回傳值。
什麼時候使用contract testing 當你有兩個需要互通有無的service時，contract testing就可以立刻派上用場，例如API client要與web front-end溝通的應用場景。雖然單一客戶端對單一個服務是很常建的use case，contract testing在微服務架構(有多個services的環境)更彰顯其價值。如果有格式良好的合約測試，開發就要避免版本地域就更家容易。合約測試可說是微服務開發與部署的殺手級應用。
合約測試術語 consumer: 例如需要接收資料的client provider: 例如server上的API，提供client所需的資料 通常在微服務架構下，client/server的術語不適合所有情境，例如透過訊息隊列的溝通就不適合。所以這裡會以consumer與provider為主。
消費者驅動的contracts Pact是程式碼優先、消費者驅動的合約測試工具，通常由寫程式的開發或測試人員使用。在自動化的consumer tests過程中產生這個contract。這種模式的一個主要優勢是，全部的communication中，只測試到 consumer會實際使用到的部分communication。也就是說，任何不會被當前的consumer所使用到的 provider行為，都可以在不弄壞測試結果的前提下做異動修改。
另外Pact contract也不像schema或者規格 (例如 OAS) 這類靜態的artefact定義資源的所有可能的狀態，pact contract實施方式是藉由執行測試案例的集合，每個元素描述了具體的請求/回應對。Pact實際上就是範例式合約。參考Schema測試與Contract測試的差異]]></description>
</item>
</channel>
</rss>
